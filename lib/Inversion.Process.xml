<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Inversion.Process</name>
    </assembly>
    <members>
        <member name="T:Inversion.Process.DataCollectionEx">
            <summary>
            Extension methods acting upon `IDataCollection{ErrorMessage}` objects.
            </summary>
        </member>
        <member name="M:Inversion.Process.DataCollectionEx.CreateMessage(Inversion.Collections.IDataCollection{Inversion.Process.ErrorMessage},System.String)">
            <summary>
            Creates a new error message and adds it to the collection.
            </summary>
            <param name="self">The collection to add the message to.</param>
            <param name="message">The human readable error message.</param>
            <returns>Returns the error message object that was created.</returns>
        </member>
        <member name="M:Inversion.Process.DataCollectionEx.CreateMessage(Inversion.Collections.IDataCollection{Inversion.Process.ErrorMessage},System.String,System.Object[])">
            <summary>
            Creates a new error message and adds it to the collection.
            </summary>
            <param name="self">The collection to add the message to.</param>
            <param name="message">The human readable error message as text for string formatting.</param>
            <param name="parms">Paramters for formatting the message text.</param>
            <returns>Returns the error message object that was created.</returns>
        </member>
        <member name="T:Inversion.Process.ErrorMessage">
            <summary>
            Represents an error message that occurred
            during application processing that may be suitable
            for presenting in any user agent.
            </summary>
        </member>
        <member name="M:Inversion.Process.ErrorMessage.System#ICloneable#Clone">
            <summary>
            Clones a new error message as a copy of this one.
            </summary>
            <returns>The newly cloned error message.</returns>
        </member>
        <member name="M:Inversion.Process.ErrorMessage.Clone">
            <summary>
            Clones a new error message as a copy of this one.
            </summary>
            <returns>The newly cloned error message.</returns>
        </member>
        <member name="M:Inversion.Process.ErrorMessage.#ctor(System.String)">
            <summary>
            Instantiates a new error message.
            </summary>
            <param name="message">The human readable message.</param>
        </member>
        <member name="M:Inversion.Process.ErrorMessage.#ctor(System.String,System.Exception)">
            <summary>
            Instantiates a new error message.
            </summary>
            <param name="message">The human readable message.</param>
            <param name="err">The exception that gave rise to this error.</param>
        </member>
        <member name="M:Inversion.Process.ErrorMessage.ToXml(System.Xml.XmlWriter)">
            <summary>
            Produces an xml representation of the model.
            </summary>
            <param name="writer">The writer to used to write the xml to. </param>
        </member>
        <member name="M:Inversion.Process.ErrorMessage.ToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Produces a json respresentation of the model.
            </summary>
            <param name="writer">The writer to use for producing json.</param>
        </member>
        <member name="M:Inversion.Process.ErrorMessage.ToString">
            <summary>
            Provides a string representation of this error message.
            </summary>
            <returns>Returns a new string representing this error message.</returns>
        </member>
        <member name="P:Inversion.Process.ErrorMessage.Data">
            <summary>
            Provides an abstract representation
            of the objects data expressed as a JSON object.
            </summary>
            <remarks>
            For this type the json object is only created the once.
            </remarks>
        </member>
        <member name="P:Inversion.Process.ErrorMessage.Message">
            <summary>
            A human readable message summarising the error.
            </summary>
        </member>
        <member name="P:Inversion.Process.ErrorMessage.Exception">
            <summary>
            The exception if any that gave rise to this error.
            </summary>
        </member>
        <member name="T:Inversion.Process.Event">
            <summary>
            Represents an event occuring in the system.
            </summary>
            <remarks>
            Exactly what "event" means is application specific
            and can range from imperative to reactive.
            </remarks>
        </member>
        <member name="T:Inversion.Process.IEvent">
            <summary>
            Represents an event occuring in the system.
            </summary>
            <remarks>
            Exactly what "event" means is application specific
            and can range from imperative to reactive.
            </remarks>
        </member>
        <member name="M:Inversion.Process.IEvent.Add(System.String,System.String)">
            <summary>
            Adds a key-value pair as a parameter to the event.
            </summary>
            <param name="key">The key of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Inversion.Process.IEvent.HasParams(System.String[])">
            <summary>
            Determines whether or not the parameters 
            specified exist in the event.
            </summary>
            <param name="parms">The parameters to check for.</param>
            <returns>Returns true if all the parameters exist; otherwise return false.</returns>
        </member>
        <member name="M:Inversion.Process.IEvent.HasParamValues(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Determines whether or not all the key-value pairs
            provided exist in the events parameters.
            </summary>
            <param name="match">The key-value pairs to check for.</param>
            <returns>
            Returns true if all the key-value pairs specified exists in the events
            parameters; otherwise returns false.
            </returns>
        </member>
        <member name="M:Inversion.Process.IEvent.HasRequiredParams(System.String[])">
            <summary>
            Determines whether or not each of the prameters specified
            exist on the event, and creates an error for each one that
            does not.
            </summary>
            <param name="parms">The paramter names to check for.</param>
            <returns>
            Returns true if each of the parameters exist on the event;
            otherwise returns false.
            </returns>
        </member>
        <member name="M:Inversion.Process.IEvent.Fire">
            <summary>
            Fires the event on the context to which it is bound.
            </summary>
            <returns>
            Returns the event that has just been fired.
            </returns>
        </member>
        <member name="P:Inversion.Process.IEvent.Item(System.String)">
            <summary>
            Provides indexed access to the events parameters.
            </summary>
            <param name="key">The key of the parameter to look up.</param>
            <returns>Returns the parameter indexed by the key.</returns>
        </member>
        <member name="P:Inversion.Process.IEvent.Message">
            <summary>
            The simple message the event represents.
            </summary>
            <remarks>
            Again, exactly what this means is application specific.
            </remarks>
        </member>
        <member name="P:Inversion.Process.IEvent.Params">
            <summary>
            The parameters for this event represented
            as key-value pairs.
            </summary>
        </member>
        <member name="P:Inversion.Process.IEvent.Context">
            <summary>
            The context upon which this event is being fired.
            </summary>
            <remarks>
            And event always belongs to a context.
            </remarks>
        </member>
        <member name="P:Inversion.Process.IEvent.Object">
            <summary>
            Any object that the event may be carrying.
            </summary>
            <remarks>
            This is a dirty escape hatch, and
            can even be used as a "return" value
            for the event.
            </remarks>
        </member>
        <member name="M:Inversion.Process.Event.#ctor(Inversion.Process.ProcessContext,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Instantiates a new event bound  to a context.
            </summary>
            <param name="context">The context to which the event is bound.</param>
            <param name="message">The simple message the event represents.</param>
            <param name="parameters">The parameters of the event.</param>
        </member>
        <member name="M:Inversion.Process.Event.#ctor(Inversion.Process.ProcessContext,System.String,Inversion.IData,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Instantiates a new event bound  to a context.
            </summary>
            <param name="context">The context to which the event is bound.</param>
            <param name="message">The simple message the event represents.</param>
            <param name="obj">An object being carried by the event.</param>
            <param name="parameters">The parameters of the event.</param>
        </member>
        <member name="M:Inversion.Process.Event.#ctor(Inversion.Process.ProcessContext,System.String,System.String[])">
            <summary>
            Instantiates a new event bound  to a context.
            </summary>
            <param name="context">The context to which the event is bound.</param>
            <param name="message">The simple message the event represents.</param>
            <param name="parms">
            A sequnce of context parameter names that should be copied from the context
            to this event.
            </param>
        </member>
        <member name="M:Inversion.Process.Event.#ctor(Inversion.Process.ProcessContext,System.String,Inversion.IData,System.String[])">
            <summary>
            Instantiates a new event bound  to a context.
            </summary>
            <param name="context">The context to which the event is bound.</param>
            <param name="message">The simple message the event represents.</param>
            <param name="obj">An object being carried by the event.</param>
            <param name="parms">
            A sequnce of context parameter names that should be copied from the context
            to this event.
            </param>
        </member>
        <member name="M:Inversion.Process.Event.#ctor(Inversion.Process.IEvent)">
            <summary>
            Instantiates a new event as a copy of the event provided.
            </summary>
            <param name="ev">The event to copy for this new instance.</param>
        </member>
        <member name="M:Inversion.Process.Event.System#ICloneable#Clone">
            <summary>
            Creates a clone of this event by copying
            it into a new instance.
            </summary>
            <returns>The newly cloned event.</returns>
        </member>
        <member name="M:Inversion.Process.Event.Clone">
            <summary>
            Creates a clone of this event by copying
            it into a new instance.
            </summary>
            <returns>The newly cloned event.</returns>
        </member>
        <member name="M:Inversion.Process.Event.Add(System.String,System.String)">
            <summary>
            Adds a key-value pair as a parameter to the event.
            </summary>
            <param name="key">The key of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:Inversion.Process.Event.Fire">
            <summary>
            Fires the event on the context to which it is bound.
            </summary>
            <returns>
            Returns the event that has just been fired.
            </returns>
        </member>
        <member name="M:Inversion.Process.Event.HasParams(System.String[])">
            <summary>
            Determines whether or not the parameters 
            specified exist in the event.
            </summary>
            <param name="parms">The parameters to check for.</param>
            <returns>Returns true if all the parameters exist; otherwise return false.</returns>
        </member>
        <member name="M:Inversion.Process.Event.HasParamValues(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Determines whether or not all the key-value pairs
            provided exist in the events parameters.
            </summary>
            <param name="match">The key-value pairs to check for.</param>
            <returns>
            Returns true if all the key-value pairs specified exists in the events
            parameters; otherwise returns false.
            </returns>
        </member>
        <member name="M:Inversion.Process.Event.HasRequiredParams(System.String[])">
            <summary>
            Determines whether or not each of the prameters specified
            exist on the event, and creates an error for each one that
            does not.
            </summary>
            <param name="parms">The paramter names to check for.</param>
            <returns>
            Returns true if each of the parameters exist on the event;
            otherwise returns false.
            </returns>
        </member>
        <member name="M:Inversion.Process.Event.ToString">
            <summary>
            Creates a string representation of the event.
            </summary>
            <returns>Returns a new string representing the event.</returns>
        </member>
        <member name="M:Inversion.Process.Event.GetEnumerator">
            <summary>
            Obtains an enumerator for the events parameters.
            </summary>
            <returns>Returns an enumerator suitable for iterating through the events parameters.</returns>
        </member>
        <member name="M:Inversion.Process.Event.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Obtains an enumerator for the events parameters.
            </summary>
            <returns>Returns an enumerator suitable for iterating through the events parameters.</returns>
        </member>
        <member name="M:Inversion.Process.Event.ToXml(System.Xml.XmlWriter)">
            <summary>
            Produces an xml representation of the model.
            </summary>
            <param name="xml">The writer to used to write the xml to. </param>
        </member>
        <member name="M:Inversion.Process.Event.ToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Produces a json respresentation of the model.
            </summary>
            <param name="json">The writer to use for producing json.</param>
        </member>
        <member name="M:Inversion.Process.Event.FromXml(Inversion.Process.ProcessContext,System.String)">
            <summary>
            Creates a new event from an xml representation.
            </summary>
            <param name="context">The context to which the new event will be bound.</param>
            <param name="xml">The xml representation of an event.</param>
            <returns>Returns a new event.</returns>
        </member>
        <member name="M:Inversion.Process.Event.FromJson(Inversion.Process.ProcessContext,System.String)">
            <summary>
            Creates a new event from an json representation.
            </summary>
            <param name="context">The context to which the new event will be bound.</param>
            <param name="json">The json representation of an event.</param>
            <returns>Returns a new event.</returns>
        </member>
        <member name="P:Inversion.Process.Event.Item(System.String)">
            <summary>
            Provides indexed access to the events parameters.
            </summary>
            <param name="key">The key of the parameter to look up.</param>
            <returns>Returns the parameter indexed by the key.</returns>
        </member>
        <member name="P:Inversion.Process.Event.Message">
            <summary>
            The simple message the event represents.
            </summary>
            <remarks>
            Again, exactly what this means is application specific.
            </remarks>
        </member>
        <member name="P:Inversion.Process.Event.Params">
            <summary>
            The parameters for this event represented
            as key-value pairs.
            </summary>
        </member>
        <member name="P:Inversion.Process.Event.Context">
            <summary>
            The context upon which this event is being fired.
            </summary>
            <remarks>
            And event always belongs to a context.
            </remarks>
        </member>
        <member name="P:Inversion.Process.Event.Object">
            <summary>
            Any object that the event may be carrying.
            </summary>
            <remarks>
            This is a dirty escape hatch, and
            can even be used as a "return" value
            for the event.
            </remarks>
        </member>
        <member name="P:Inversion.Process.Event.Data">
            <summary>
            Provides an abstract representation
            of the objects data expressed as a JSON object.
            </summary>
            <remarks>
            For this type the json object is created each time
            it is accessed.
            </remarks>
        </member>
        <member name="T:Inversion.Process.Event.ParseException">
            <summary>
            An exception thrown when unable to parse the xml or json representations
            for creating a new event.
            </summary>
        </member>
        <member name="M:Inversion.Process.Event.ParseException.#ctor(System.String)">
            <summary>
            Instantiates a new parse exception with a human readable message.
            </summary>
            <param name="message">The human readable message for the exception.</param>
        </member>
        <member name="M:Inversion.Process.Event.ParseException.#ctor(System.String,System.Exception)">
            <summary>
            instantiates a new exception wrapping a provided inner exception,
            with a human readable message.
            </summary>
            <param name="message">The human readable message for the exception.</param>
            <param name="err">The inner exception to wrap.</param>
        </member>
        <member name="T:Inversion.Process.IProcessBehaviour">
            <summary>
            The base type for behaviours in Conclave. Behaviours are intended
            to be registered against a context such as <see cref="T:Inversion.Process.ProcessContext"/>
            using `ProcessContext.Register(behaviour)`.
            </summary>
            <remarks>
            <para>
            When events are fired
            against that context, each behaviour registered will apply it's condition
            to the <see cref="T:Inversion.Process.IEvent"/> being fired. If this condition returns `true`,
            then the context will apply the behaviours `Action` against
            the event.
            </para>
            <para>
            Care should be taken to ensure behaviours are well behaved. To this
            end the following contract is implied by use of `IProcessBehaviour`:-
            </para>
            </remarks>
            <example>
            <code> <![CDATA[
            	context.Register(behaviours);
            	context.Fire("set-up");
            	context.Fire("process-request");	
            	context.Fire("tear-down");
            	context.Completed();
            	context.Response.ContentType = "text/xml";
            	context.Response.Write(context.ControlState.ToXml());
            ]]> </code>
            </example>
        </member>
        <member name="M:Inversion.Process.IProcessBehaviour.Action(Inversion.Process.IEvent)">
            <summary>
            Process an action for the provided <see cref="T:Inversion.Process.IEvent"/>.
            </summary>
            <param name="ev">The event to be processed. </param>
        </member>
        <member name="M:Inversion.Process.IProcessBehaviour.Action(Inversion.Process.IEvent,Inversion.Process.ProcessContext)">
            <summary>
            process and action for the provided <see cref="T:Inversion.Process.IEvent"/>
            with the <see cref="T:Inversion.Process.ProcessContext"/> provided.
            </summary>
            <param name="ev">The event to process.</param>
            <param name="context">The context to use.</param>
        </member>
        <member name="M:Inversion.Process.IProcessBehaviour.Condition(Inversion.Process.IEvent)">
            <summary>
            The considtion that determines whether of not the behaviours action
            is valid to run.
            </summary>
            <param name="ev">The event to consider with the condition.</param>
            <returns>
            `true` if the condition is met; otherwise,  returns  `false`.
            </returns>
        </member>
        <member name="P:Inversion.Process.IProcessBehaviour.Name">
            <summary>
            Gets the message that the behaviour will respond to.
            </summary>
            <value>A `string` value.</value>
        </member>
        <member name="T:Inversion.Process.IServiceContainer">
            <summary>
            Represent the contract of a simple service
            container from which services may be ontained by name.
            This interface focused on consuming services from a container
            and does not speak to the configuration or management
            of a container.
            </summary>
        </member>
        <member name="M:Inversion.Process.IServiceContainer.GetService``1(System.String)">
            <summary>
            Gets the service if any of the provided name and type.
            </summary>
            <typeparam name="T">The type of the service being obtained.</typeparam>
            <param name="name">The name of the service to obtain.</param>
            <returns>Returns the service of the specified name.</returns>
        </member>
        <member name="M:Inversion.Process.IServiceContainer.ContainsService(System.String)">
            <summary>
            Determines if the container has a service of a specified name.
            </summary>
            <param name="name">The name of the service to check for.</param>
            <returns>Returns true if the service exists; otherwise returns false.</returns>
        </member>
        <member name="T:Inversion.Process.ProcessBehaviour">
            <summary>
            A simple named behaviour with a default condition
            matching that name againts <see cref="P:Inversion.Process.IEvent.Message"/>.
            </summary>
        </member>
        <member name="M:Inversion.Process.ProcessBehaviour.#ctor(System.String)">
            <summary>
            Creates a new instance of the behaviour.
            </summary>
            <param name="name">The name of the behaviour.</param>
        </member>
        <member name="M:Inversion.Process.ProcessBehaviour.Condition(Inversion.Process.IEvent)">
            <summary>
            Determines if the event specifies the behaviour by name.
            </summary>
            <param name="ev">The event to consult.</param>
            <returns>
            Returns <b>true</b> if the <see cref="P:Inversion.Process.IEvent.Message"/>
            is the same as the <see cref="P:Inversion.Process.ProcessBehaviour.Name"/>
            </returns>
            <remarks>
            The intent is to override for bespoke conditions.
            </remarks>
        </member>
        <member name="M:Inversion.Process.ProcessBehaviour.Condition(Inversion.Process.IEvent,Inversion.Process.ProcessContext)">
            <summary>
            Determines if the event specifies the behaviour by name.
            </summary>
            <param name="ev">The event to consult.</param>
            <param name="context">The context to consult.</param>
            <returns>
            Returns true if true if `ev.Message` is the same as `this.Message`
             </returns>
            <remarks>
            The intent is to override for bespoke conditions.
            </remarks>
        </member>
        <member name="M:Inversion.Process.ProcessBehaviour.Action(Inversion.Process.IEvent)">
            <summary>
            The action to perform when the `Condition(IEvent)` is met.
            </summary>
            <param name="ev">The event to consult.</param>
        </member>
        <member name="M:Inversion.Process.ProcessBehaviour.Action(Inversion.Process.IEvent,Inversion.Process.ProcessContext)">
            <summary>
            The action to perform when the `Condition(IEvent)` is met.
            </summary>
            <param name="ev">The event to consult.</param>
            <param name="context">The context upon which to perform any action.</param>
        </member>
        <member name="P:Inversion.Process.ProcessBehaviour.Name">
            <summary>
            The name the behaviour is known by to the system.
            </summary>
        </member>
        <member name="T:Inversion.Process.ProcessContext">
            <summary>
            Provides a processing context as a self-contained and sufficient
            channel of application execution. The context manages a set of
            behaviours and mediates between them and the outside world.
            </summary>
            <remarks>
            The process context along with the `IBehaviour` objects registered
            on its bus *are* Inversion. Everything else is chosen convention about
            how those behaviours interact with each other via the context.
            </remarks>
        </member>
        <member name="M:Inversion.Process.ProcessContext.#ctor(Inversion.Process.IServiceContainer)">
            <summary>
            Instantiates a new process contrext for inversion.
            </summary>
            <remarks>You can think of this type here as "being Inversion". This is the thing.</remarks>
            <param name="services">The service container the context will use.</param>
        </member>
        <member name="M:Inversion.Process.ProcessContext.Finalize">
            <summary>
            Desrtructor for the type.
            </summary>
        </member>
        <member name="M:Inversion.Process.ProcessContext.Dispose">
            <summary>
            Releases all resources maintained by the current context instance.
            </summary>
        </member>
        <member name="M:Inversion.Process.ProcessContext.Dispose(System.Boolean)">
            <summary>
            Disposal that allows for partitioning of 
            clean-up of managed and unmanaged resources.
            </summary>
            <param name="disposing"></param>
            <remarks>
            This is looking conceited and should probably be removed.
            I'm not even sure I can explain a use case for it in terms
            of an Inversion context.
            </remarks>
        </member>
        <member name="M:Inversion.Process.ProcessContext.Register(Inversion.Process.IProcessBehaviour)">
            <summary>
            Registers a behaviour with the context ensuring
            it is consulted for each event fired on this context.
            </summary>
            <param name="behaviour">The behaviour to register with this context.</param>
        </member>
        <member name="M:Inversion.Process.ProcessContext.Register(System.Collections.Generic.IEnumerable{Inversion.Process.IProcessBehaviour})">
            <summary>
            Registers a whole bunch of behaviours with this context ensuring
            each one is consulted when an event is fired on this context.
            </summary>
            <param name="behaviours">The behaviours to register with this context.</param>
        </member>
        <member name="M:Inversion.Process.ProcessContext.Register(System.Predicate{Inversion.Process.IEvent},System.Action{Inversion.Process.IEvent,Inversion.Process.ProcessContext})">
            <summary>
            Creates and registers a runtime behaviour with this context constructed 
            from a predicate representing the behaviours condition, and an action
            representing the behaviours action. This behaviour will be consulted for
            any event fired on this context.
            </summary>
            <param name="condition">The predicate to use as the behaviours condition.</param>
            <param name="action">The action to use as the behaviours action.</param>
        </member>
        <member name="M:Inversion.Process.ProcessContext.Fire(Inversion.Process.IEvent)">
            <summary>
            Fires an event on the context. Each behaviour registered with context
            is consulted in no particular order, and for each behaviour that has a condition
            that returns true when applied to the event, that behaviours action is executed.
            </summary>
            <param name="ev">The event to fire on this context.</param>
            <returns></returns>
        </member>
        <member name="M:Inversion.Process.ProcessContext.Fire(System.String)">
            <summary>
            Constructs a simple event, with a simple string message
            and fires it on this context.
            </summary>
            <param name="message">The message to assign to the event.</param>
            <returns>Returns the event that was constructed and fired on this context.</returns>
        </member>
        <member name="M:Inversion.Process.ProcessContext.Fire(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Constructs an event using the message specified, and using the dictionary
            provided to populate the parameters of the event. This event is then
            fired on this context.
            </summary>
            <param name="message">The message to assign to the event.</param>
            <param name="parms">The parameters to populate the event with.</param>
            <returns>Returns the event that was constructed and fired on this context.</returns>
        </member>
        <member name="M:Inversion.Process.ProcessContext.FireWith(System.String,System.String[])">
            <summary>
            Contructs an event with the message specified, using the supplied
            parameter keys to copy parameters from the context to the constructed event.
            This event is then fired on this context.
            </summary>
            <param name="message">The message to assign to the event.</param>
            <param name="parms">The parameters to copy from the context.</param>
            <returns>Returns the event that was constructed and fired on this context.</returns>
        </member>
        <member name="M:Inversion.Process.ProcessContext.Completed">
            <summary>
            Instructs the context that operations have finished, and that while it
            may still be consulted no further events will be fired.
            </summary>
        </member>
        <member name="M:Inversion.Process.ProcessContext.IsFlagged(System.String)">
            <summary>
            Determines whether or not the flag of the
            specified key exists.
            </summary>
            <param name="flag">The key of the flag to check for.</param>
            <returns>Returns true if the flag exists; otherwise returns false.</returns>
        </member>
        <member name="M:Inversion.Process.ProcessContext.HasParams(System.String[])">
            <summary>
            Determines whether or not the parameters 
            specified exist in the current context.
            </summary>
            <param name="parms">The parameters to check for.</param>
            <returns>Returns true if all the parameters exist; otherwise return false.</returns>
        </member>
        <member name="M:Inversion.Process.ProcessContext.HasParamValue(System.String,System.String)">
            <summary>
            Determines whether or not the parameter name and
            value specified exists in the current context.
            </summary>
            <param name="name">The name of the parameter to check for.</param>
            <param name="value">The value of the parameter to check for.</param>
            <returns>
            Returns true if a parameter with the name and value specified exists
            in this conext; otherwise returns false.
            </returns>
        </member>
        <member name="M:Inversion.Process.ProcessContext.HasParamValues(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Determines whether or not all the key-value pairs
            provided exist in the contexts parameters.
            </summary>
            <param name="match">The key-value pairs to check for.</param>
            <returns>
            Returns true if all the key-value pairs specified exists in the contexts
            parameters; otherwise returns false.
            </returns>
        </member>
        <member name="M:Inversion.Process.ProcessContext.HasRequiredParams(System.String[])">
            <summary>
            Determines whether or not the specified
            paramters exist in this context, and produces
            and error for each one that does not exist.
            </summary>
            <param name="parms">The parameter keys to check for.</param>
            <returns>Returns true if all the paramter keys are present; otherwise returns false.</returns>
        </member>
        <member name="M:Inversion.Process.ProcessContext.HasControlState(System.String[])">
            <summary>
            Dtermines whether or not the control state has entries indexed
            under the keys provided.
            </summary>
            <param name="parms">The keys to check for in the control state.</param>
            <returns>
            Returns true if all the specified keys exist in the control state;
            otherwise returns false.
            </returns>
        </member>
        <member name="M:Inversion.Process.ProcessContext.HasRequiredControlState(System.String[])">
            <summary>
            Dtermines whether or not the control state has entries indexed
            under the keys provided, and creates an error for each one that doesn't.
            </summary>
            <param name="parms">The keys to check for in the control state.</param>
            <returns>
            Returns true if all the specified keys exist in the control state;
            otherwise returns false.
            </returns>
        </member>
        <member name="M:Inversion.Process.ProcessContext.ParamOrDefault(System.String,System.String)">
            <summary>
            Obtains the context prarameter for the specified
            key, or if it doesn't exist uses the default value specified.
            </summary>	
            <param name="key">The key of the context parameter to use.</param>
            <param name="defaultValue">The value to use if the parameter doesn't exist.</param>
            <returns>Returns the specified parameter if it exists; otherwise returns false.</returns>
        </member>
        <member name="M:Inversion.Process.ProcessContext.ToString">
            <summary>
            Provides a string representation of the context and its current state.
            </summary>
            <returns>Returns a string representation of the context.</returns>
        </member>
        <member name="P:Inversion.Process.ProcessContext.Services">
            <summary>
            Exposes the processes service container.
            </summary>
        </member>
        <member name="P:Inversion.Process.ProcessContext.Bus">
            <summary>
            The event bus of the process.
            </summary>
        </member>
        <member name="P:Inversion.Process.ProcessContext.ObjectCache">
            <summary>
            Provsion of a simple object cache for the context.
            </summary>
            <remarks>
            This really needs replaced with our own interface
            that we control. This isn't portable.
            </remarks>
        </member>
        <member name="P:Inversion.Process.ProcessContext.Messages">
            <summary>
            Messages intended for user feedback.
            </summary>
            <remarks>
            This is a poor mechanism for localisation,
            and may need to be treated as tokens
            by the front end to localise.
            </remarks>
        </member>
        <member name="P:Inversion.Process.ProcessContext.Errors">
            <summary>
            Error messages intended for user feedback.
            </summary>
            <remarks>
            This is a poor mechanism for localisation,
            and may need to be treated as tokens
            by the front end to localise.
            </remarks>
        </member>
        <member name="P:Inversion.Process.ProcessContext.Timers">
            <summary>
            A dictionary of named timers.
            </summary>
            <remarks>
            `ProcessTimer` is only intended
            for informal timings, and it not intended
            for proper metrics.
            </remarks>
        </member>
        <member name="P:Inversion.Process.ProcessContext.ViewSteps">
            <summary>
            Gives access to a collection of view steps
            that will be used to control the render
            pipeline for this context.
            </summary>
        </member>
        <member name="P:Inversion.Process.ProcessContext.ControlState">
            <summary>
            Gives access to the current control state of the context.
            This is the common state that behaviours share and that
            provides the end state or result of a contexts running process.
            </summary>
        </member>
        <member name="P:Inversion.Process.ProcessContext.Flags">
            <summary>
            Flags for the context available to behaviours as shared state.
            </summary>
        </member>
        <member name="P:Inversion.Process.ProcessContext.Params">
            <summary>
            The parameters of the contexts execution available
            to behaviours as shared state.
            </summary>
        </member>
        <member name="T:Inversion.Process.ProcessException">
            <summary>
            An exception that is thrown when a problem is encountered
            in the Inversion processing model.
            </summary>
        </member>
        <member name="M:Inversion.Process.ProcessException.#ctor(System.String)">
            <summary>
            Instantiates a new process exception with the message provided.
            </summary>
            <param name="message">A simple human readable message that summarises this exceptions cause.</param>
        </member>
        <member name="M:Inversion.Process.ProcessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            instantiates a new process exception with the details needed to handle
            serialisation and deserialisation.
            </summary>
            <param name="info">The info needed to handle the serialisation of this exception.</param>
            <param name="context">The context used to manage the serialisation stream.</param>
        </member>
        <member name="T:Inversion.Process.ProcessTimer">
            <summary>
            Represents a simplistic timer as a start and stop time
            as a pair of date time objects.
            </summary>
            <remarks>
            This is **NOT** suitable for adult timings, but introduces no
            overhead and is suitable for applications developers to be
            able to monitor basic timings of features to know if features
            are costing more time that expected or are going into distress.
            </remarks>
        </member>
        <member name="M:Inversion.Process.ProcessTimer.#ctor">
            <summary>
            Instances a new process timer, defaulting its
            start time as now.
            </summary>
        </member>
        <member name="M:Inversion.Process.ProcessTimer.#ctor(System.DateTime)">
            <summary>
            Instantiates a new process timer with
            the start time specified.
            </summary>
            <param name="start">The start time of the new timer.</param>
        </member>
        <member name="M:Inversion.Process.ProcessTimer.#ctor(Inversion.Process.ProcessTimer)">
            <summary>
            Instantiates a new process timer as a copy of
            a provied timer.
            </summary>
            <param name="timer"></param>
        </member>
        <member name="M:Inversion.Process.ProcessTimer.System#ICloneable#Clone">
            <summary>
            Clones this timer as a copy.
            </summary>
            <returns>Returns a new process timer.</returns>
        </member>
        <member name="M:Inversion.Process.ProcessTimer.Clone">
            <summary>
            Clones this timer as a copy.
            </summary>
            <returns>Returns a new process timer.</returns>
        </member>
        <member name="M:Inversion.Process.ProcessTimer.Begin">
            <summary>
            Sets the start time of this timer to now.
            </summary>
            <returns>Returns this timer.</returns>
        </member>
        <member name="M:Inversion.Process.ProcessTimer.End">
            <summary>
            Sets the stop time of this timer to now.
            </summary>
            <returns>Returns this process timer.</returns>
        </member>
        <member name="M:Inversion.Process.ProcessTimer.ToXml(System.Xml.XmlWriter)">
            <summary>
            Produces an xml representation of the model.
            </summary>
            <param name="writer">The writer to used to write the xml to. </param>
        </member>
        <member name="M:Inversion.Process.ProcessTimer.ToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Produces a json respresentation of the model.
            </summary>
            <param name="writer">The writer to use for producing json.</param>
        </member>
        <member name="P:Inversion.Process.ProcessTimer.HasStopped">
            <summary>
            Determines if this timer has been stopped or not.
            </summary>
        </member>
        <member name="P:Inversion.Process.ProcessTimer.Start">
            <summary>
            The start time of the timer.
            </summary>
        </member>
        <member name="P:Inversion.Process.ProcessTimer.Stop">
            <summary>
            The stop time of the timer.
            </summary>
        </member>
        <member name="P:Inversion.Process.ProcessTimer.Duration">
            <summary>
            The time that has elapsed between
            the start and the stop times.
            </summary>
        </member>
        <member name="P:Inversion.Process.ProcessTimer.Data">
            <summary>
            Provides an abstract representation
            of the objects data expressed as a JSON object.
            </summary>
            <remarks>
            For this type the json object is created each time
            it is accessed.
            </remarks>
        </member>
        <member name="T:Inversion.Process.ProcessTimerDictionary">
            <summary>
            A simple dictionary that contains and helps control process timer instances.
            </summary>
        </member>
        <member name="M:Inversion.Process.ProcessTimerDictionary.Begin(System.String)">
            <summary>
            Create and start a new timer of the specified name.
            </summary>
            <param name="name">The name of the new timer.</param>
            <returns>Returns the timer that has just been started.</returns>
        </member>
        <member name="M:Inversion.Process.ProcessTimerDictionary.End(System.String)">
            <summary>
            Ends the process timer of the corresponding name.
            </summary>
            <param name="name">The name of the timer to end.</param>
            <returns>Returns the process timer that was ended.</returns>
        </member>
        <member name="M:Inversion.Process.ProcessTimerDictionary.TimeAction(System.String,System.Action)">
            <summary>
            Creates and starts a new timer of a specified name,
            starts it, performs the provided action, and then stops the timer.
            </summary>
            <param name="name">The name of the process timer.</param>
            <param name="action">The action to perform.</param>
            <returns>Returns the process timer that was run.</returns>
        </member>
        <member name="T:Inversion.Process.RuntimeBehaviour">
            <summary>
            A behaviour that facilitates creating behaviours whose conditions and actions
            are assigned at runtime not compile time.
            </summary>
        </member>
        <member name="M:Inversion.Process.RuntimeBehaviour.#ctor(System.String)">
            <summary>
            Instantiates a new runtime behaviour.
            </summary>
            <param name="name">The name by which the behaviour is known to the system.</param>
        </member>
        <member name="M:Inversion.Process.RuntimeBehaviour.#ctor(System.String,System.Predicate{Inversion.Process.IEvent},System.Action{Inversion.Process.IEvent,Inversion.Process.ProcessContext})">
            <summary>
            Instantiates a new runtime behaviour.
            </summary>
            <param name="name">The name by which the behaviour is known to the system.</param>
            <param name="condition">The predicate that will determine if this behaviours action should be executed.</param>
            <param name="action">The action that should be performed if this behaviours conditions are met.</param>
        </member>
        <member name="M:Inversion.Process.RuntimeBehaviour.Condition(Inversion.Process.IEvent)">
            <summary>
            Determines if this behaviours action should be executed in
            response to the provided event.
            </summary>
            <param name="ev">The event to consider.</param>
            <returns>Returns true if this behaviours action to execute in response to this event; otherwise returns  false.</returns>
        </member>
        <member name="M:Inversion.Process.RuntimeBehaviour.Action(Inversion.Process.IEvent,Inversion.Process.ProcessContext)">
            <summary>
            The action to perform if this behaviours condition is met.
            </summary>
            <param name="ev">The event to consult.</param>
            <param name="context">The context upon which to perform any action.</param>
        </member>
        <member name="T:Inversion.Process.SimpleSequenceBehaviour">
            <summary>
            A behaviour concerned with driving the processing of a
            sequence of messages.
            </summary>
            <remarks>
            You can think of behaviour as taking one incoming message
            and turning it into a sequence of messages.
            </remarks>
        </member>
        <member name="M:Inversion.Process.SimpleSequenceBehaviour.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Instantiates a new simple sequence behaviour, configuring it
            with a sequence as an enumerable.
            </summary>
            <param name="message">The message this behaviour should respond to.</param>
            <param name="sequence">The sequence of simple messages this behaviour should generate.</param>
        </member>
        <member name="M:Inversion.Process.SimpleSequenceBehaviour.Action(Inversion.Process.IEvent,Inversion.Process.ProcessContext)">
            <summary>
            if the conditions of this behaviour are met it will
            generate a sequence of configured messages.
            </summary>
            <param name="ev">The event that gave rise to this action.</param>
            <param name="context">The context that should be acted apon.</param>
        </member>
        <member name="T:Inversion.Process.ViewStep">
            <summary>
            Represents a step in a rendering view pipeline.
            </summary>
            <remarks>
            A step can either have <see cref="P:Inversion.Process.ViewStep.Content"/> or
            a <see cref="P:Inversion.Process.ViewStep.Model"/>, but not both.
            </remarks>
        </member>
        <member name="M:Inversion.Process.ViewStep.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of a step with the parameters provided.
            </summary>
            <param name="name">Human readable name of the step.</param>
            <param name="contentType">The type of the steps content.</param>
            <param name="content">The actual content of the step.</param>
        </member>
        <member name="M:Inversion.Process.ViewStep.#ctor(System.String,Inversion.IData)">
            <summary>
            Creates a new instance of a step with the parameters provided.
            </summary>
            <param name="name">The human readable name of the step.</param>
            <param name="model">The actual model of the step.</param>
        </member>
        <member name="P:Inversion.Process.ViewStep.Name">
            <summary>
            The human readable name of the step.
            </summary>
        </member>
        <member name="P:Inversion.Process.ViewStep.ContentType">
            <summary>
            The content type of the <see cref="P:Inversion.Process.ViewStep.Content"/>
            if there is any.
            </summary>
        </member>
        <member name="P:Inversion.Process.ViewStep.Content">
            <summary>
            The content if any of the step.
            </summary>
        </member>
        <member name="P:Inversion.Process.ViewStep.Model">
            <summary>
            The model if any of the step.
            </summary>
        </member>
        <member name="P:Inversion.Process.ViewStep.HasContent">
            <summary>
            Determines whether or not the step has any content.
            </summary>
        </member>
        <member name="P:Inversion.Process.ViewStep.HasModel">
            <summary>
            Determines whether or not the step has a model.
            </summary>
        </member>
        <member name="T:Inversion.Process.ViewSteps">
            <summary>
            A collection of view step objects representing
            the steps taken in a view generating pipeline.
            </summary>
            <remarks>
            This is currently badly implemented as a concurrent stack,
            and needs to change. This needs to become a synchronised
            collection.
            </remarks>
        </member>
        <member name="M:Inversion.Process.ViewSteps.Dispose">
            <summary>
            Releases all reasources currently being used
            by this instance of view steps.
            </summary>
        </member>
        <member name="M:Inversion.Process.ViewSteps.CreateStep(System.String,System.String,System.String)">
            <summary>
            Creates a new view step and pushes it onto the
            stack of view steps to be processed.
            </summary>
            <param name="name">The name of the view step to be created.</param>
            <param name="contentType">The content type that the new view step represents.</param>
            <param name="content">The actual content of the new view step.</param>
        </member>
        <member name="M:Inversion.Process.ViewSteps.CreateStep(System.String,Inversion.IData)">
            <summary>
            Creates a new view step and pushes it onto the
            stack of view steps to be processed.
            </summary>
            <param name="name">The name of the view step to be created.</param>
            <param name="model">The actual model of the new view step.</param>
        </member>
        <member name="P:Inversion.Process.ViewSteps.HasSteps">
            <summary>
            Determines whether or not there are any
            steps.
            </summary>
        </member>
        <member name="P:Inversion.Process.ViewSteps.Last">
            <summary>
            The last step in the current pipeline.
            </summary>
        </member>
    </members>
</doc>
