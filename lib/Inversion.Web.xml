<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Inversion.Web</name>
    </assembly>
    <members>
        <member name="T:Inversion.Web.Behaviour.BootstrapBehaviour">
            <summary>
            A behaviour responsible for boostrapping the request processing.
            Out of the box it simply imports the prameters configured for this behaviour
            into the contexts params, so can be seen as a way to configure a context
            with default prameters. It should be see as a point of extensibility for
            setting up the default state of a context prior to processing a request.
            </summary>
        </member>
        <member name="T:Inversion.Web.Behaviour.WebBehaviour">
            <summary>
            An abstract provision of basic web-centric features for process behaviours
            being used in a web application.
            </summary>
        </member>
        <member name="T:Inversion.Web.Behaviour.IWebBehaviour">
            <summary>
            An specification of basic web-centric features for process behaviours
            being used in a web application.
            </summary>
        </member>
        <member name="M:Inversion.Web.Behaviour.IWebBehaviour.Action(Inversion.Process.IEvent,Inversion.Web.WebContext)">
            <summary>
            The action to perform if this behaviours condition is met.
            </summary>
            <param name="ev">The event to consult.</param>
            <param name="context">The context upon which to perform any action.</param>
        </member>
        <member name="M:Inversion.Web.Behaviour.WebBehaviour.#ctor(System.String)">
            <summary>
            Ensures on instantiattion that the base process behaviour
            contructor is called with the provided message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Inversion.Web.Behaviour.WebBehaviour.Condition(Inversion.Process.IEvent)">
            <summary>
            Determines if this behaviours action should be executed in
            response to the provided event.
            </summary>
            <param name="ev">The event to consider.</param>
            <returns>Returns true if this behaviours action to execute in response to this event; otherwise returns  false.</returns>
        </member>
        <member name="M:Inversion.Web.Behaviour.WebBehaviour.Condition(Inversion.Process.IEvent,Inversion.Web.WebContext)">
            <summary>
            Determines if this behaviours action should be executed in
            response to the provided event and context.
            </summary>
            <param name="ev">The event to consider.</param>
            <param name="context">The context to consider.</param>
            <returns></returns>
        </member>
        <member name="M:Inversion.Web.Behaviour.WebBehaviour.Action(Inversion.Process.IEvent)">
            <summary>
            The action to perform if this behaviours condition is met.
            </summary>
            <param name="ev">The event to consult.</param>
        </member>
        <member name="M:Inversion.Web.Behaviour.WebBehaviour.Action(Inversion.Process.IEvent,Inversion.Process.ProcessContext)">
            <summary>
            The action to perform if this behaviours condition is met.
            </summary>
            <param name="ev">The event to consult.</param>
            <param name="context">The context upon which to perform any action.</param>
        </member>
        <member name="M:Inversion.Web.Behaviour.WebBehaviour.Action(Inversion.Process.IEvent,Inversion.Web.WebContext)">
            <summary>
            Implementors should impliment this behaviour with the desired action
            for their behaviour.
            </summary>
            <param name="ev">The event to consult.</param>
            <param name="context">The context upon which to perform any action.</param>
        </member>
        <member name="P:Inversion.Web.Behaviour.WebBehaviour.RequiredRoles">
            <summary>
            Provides access to an enumeration of the user roles for this behaviour,
            one of which the user would need to possess for execution of this behaviours
            action to occur.
            </summary>
            <remarks>These roles would normally be configured for the behavior from the service container.</remarks>
        </member>
        <member name="M:Inversion.Web.Behaviour.BootstrapBehaviour.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Instantiates a new bootstrap behaviour configured with the key-value
            pairs provided as parameters.
            </summary>
            <param name="message">The message this behaviour should respond to.</param>
            <param name="parms">The key value-pairs to configure as parameters for this behaviour.</param>
        </member>
        <member name="M:Inversion.Web.Behaviour.BootstrapBehaviour.Action(Inversion.Process.IEvent,Inversion.Web.WebContext)">
            <summary>
            If the conditions of this behaviour are met, copies the parameters
            configured for this behaviour into the context parameters.
            </summary>
            <param name="ev">The event that gave rise to this action.</param>
            <param name="context">The context within which this action is being performed.</param>
        </member>
        <member name="P:Inversion.Web.Behaviour.BootstrapBehaviour.Parameters">
            <summary>
            Gives access to the prameters configured for the bootstrap behaviour
            that should be copied into the context params early in the
            request life-cycle.
            </summary>
        </member>
        <member name="T:Inversion.Web.Behaviour.ParseRequestBehaviour">
            <summary>
            Behaviour responsible for deconstructing the request
            into a set of conext prameters.
            </summary>
        </member>
        <member name="M:Inversion.Web.Behaviour.ParseRequestBehaviour.#ctor(System.String)">
            <summary>
            Instantiates a behaviour that decontructs the request into context parameters.
            </summary>
            <param name="message">The message that the behaviour will respond to.</param>
        </member>
        <member name="M:Inversion.Web.Behaviour.ParseRequestBehaviour.#ctor(System.String,System.String)">
            <summary>
            Instantiates a behaviour that decontructs the request into context parameters.
            </summary>
            <param name="message">The message that the behaviour will respond to.</param>
            <param name="appDirectory">
            Configures an application directory to be regarded for the application.
            The application directory is that part of the request path that is not
            significant to the request but instead represents the root directory of the application.
            </param>
        </member>
        <member name="M:Inversion.Web.Behaviour.ParseRequestBehaviour.Action(Inversion.Process.IEvent,Inversion.Web.WebContext)">
            <summary>
            Deconstructs the contexts request into a set of prameters for the context.
            </summary>
            <remarks>
            The deafult implementation uses the convention of `/area/concern/action.aspc/tail?querystring`
            </remarks>
            <param name="ev">The vent that was considered for this action.</param>
            <param name="context">The context to act upon.</param>
        </member>
        <member name="T:Inversion.Web.Behaviour.ProcessViewsBehaviour">
            <summary>
            Behaviour responsible for driving the view pipeline expressed
            as view-steps.
            </summary>
        </member>
        <member name="M:Inversion.Web.Behaviour.ProcessViewsBehaviour.#ctor(System.String)">
            <summary>
            Instantiates a new behaviour responsible for processes the inversion view pipeline.
            </summary>
            <param name="message">The message that the behaviour will respond to.</param>
        </member>
        <member name="M:Inversion.Web.Behaviour.ProcessViewsBehaviour.Action(Inversion.Process.IEvent,Inversion.Web.WebContext)">
            <summary>
            Iterates over each view-step object for the provided context
            and fires the event for that viiews processing. This is a driving behaviour.
            </summary>
            <param name="ev">The vent that was considered for this action.</param>
            <param name="context">The context to act upon.</param>
        </member>
        <member name="T:Inversion.Web.Behaviour.RenderBehaviour">
            <summary>
            Controls the writting of results from the last view step
            in the view pipeline to the response stream.
            </summary>
            <remarks>
            <para>
            This behaviour is not responsible for producing or
            transforming views, merely the writting of results.
            Consult <see cref="T:Inversion.Web.Behaviour.ProcessViewsBehaviour"/>
            for the actually processing of views.
            </para>
            </remarks>
        </member>
        <member name="M:Inversion.Web.Behaviour.RenderBehaviour.#ctor(System.String)">
            <summary>
            Creates a new instance of a render behaviour.
            </summary>
            <param name="name">The name of the render behaviour.</param>	
            <exception cref="T:Inversion.Web.WebException">
            Throws an exception is there is no view step to actually render.
            </exception>
        </member>
        <member name="M:Inversion.Web.Behaviour.RenderBehaviour.Action(Inversion.Process.IEvent,Inversion.Web.WebContext)">
            <inheritdoc />
        </member>
        <member name="T:Inversion.Web.Behaviour.ViewStateBehaviour">
            <summary>
            Constructs the initial view state of the reuqest
            as a <see cref="T:Inversion.Process.ViewStep"/> composed of the current <see cref="P:Inversion.Process.ProcessContext.ControlState"/>.
            </summary>
            <remarks>
            <para>
            This is basically a filtering of the <see cref="P:Inversion.Process.ProcessContext.ControlState"/> into
            the model called the view state, that is going to be rendered. Any item in the control state with a key
            starting with the underscore character '_' is regarded as protected, and will
            not be copied forward to the view state.
            </para>
            <para>
            If one wished to present a model for render by different means,
            or wanted to change how the filtering was done, this is the behaviour
            you would swap out for an alternate implementation.
            </para>
            </remarks>
        </member>
        <member name="M:Inversion.Web.Behaviour.ViewStateBehaviour.#ctor(System.String)">
            <summary>
            Instantiates a new view state behaviour configured with the message provided.
            </summary>
            <param name="message">The message the behaviour has set as responding to.</param>
        </member>
        <member name="M:Inversion.Web.Behaviour.ViewStateBehaviour.Action(Inversion.Process.IEvent,Inversion.Web.WebContext)">
            <summary>
            Takes the control state of the provided context and from it produces
            a view state model that is used as the basis of the view-step render
            pipeline.
            </summary>
            <remarks>
            This is what you'd override if you wanted to govern your own model presented
            to your view layer.
            </remarks>
            <param name="ev">The event that gave rise to this action.</param>
            <param name="context">The context within which this action is being performed.</param>
        </member>
        <member name="T:Inversion.Web.Behaviour.View.JsonViewBehaviour">
            <summary>
            Serialise the model of the last view step to json.
            </summary>
        </member>
        <member name="M:Inversion.Web.Behaviour.View.JsonViewBehaviour.#ctor(System.String)">
            <summary>
            Instantiates a new xml view behaviour to provide production of json views.
            </summary>
            <remarks>Defaults the content-type to "application/json"</remarks>
            <param name="message">The message the behaviour has set as responding to.</param>
        </member>
        <member name="M:Inversion.Web.Behaviour.View.JsonViewBehaviour.#ctor(System.String,System.String)">
            <summary>
            Instantiates a new xml view behaviour to provide production of json views.
            </summary>
            <param name="message">The message the behaviour has set as responding to.</param>
            <param name="contentType">The content type of the view step produced from this behaviour.</param>
        </member>
        <member name="M:Inversion.Web.Behaviour.View.JsonViewBehaviour.Action(Inversion.Process.IEvent,Inversion.Web.WebContext)">
            <summary>
            Writes the model of the last view-step as json to the content of a new view-step.
            </summary>
            <param name="ev">The event that gave rise to this action.</param>
            <param name="context">The context within which this action is being performed.</param>
        </member>
        <member name="T:Inversion.Web.Behaviour.View.RazorViewBehaviour">
            <summary>
            A web behaviour that resolves razor templates to generate views.
            </summary>
            <remarks>
            <para>
            Razor isn't getting a lot of attention in Inversion initially, at
            some point I'll pay it some attention, but it's really not a priority
            as personally I'm not a big fan.
            </para>
            <para>
            Razor is the fast food of templating. It's really tasting
            and super-saturated with utility, and it's bad for you.
            When rendering a view you really shouldn't be able to
            yield side-effects, and you shouldn't be able to consider
            anything other than the view you're rendering. In Razor
            you can do anything you want. And you will. Especially
            when people aren't looking.
            </para>
            <para>
            Worse, you'll start architecting clever helpers, and mappings,
            and... you'll start refactoring, and all your templates will
            become enmeshed in one glorious front-end monolith.
            </para>
            <para>
            Razor. Just say "no"... Okay, I'm over-egging it a bit.
            </para>
            <para>
            Joking aside, I get why Razor is so popular. It's simple, bendy,
            easy for .NET devs to dive into, and you can brute force yourself
            out of any situation. It does however in my view encourage
            poor practice and blurs an important application layer
            so the middle and front of the application risk becoming
            quickly enmeshed.
            </para>
            <para>
            Conclave favours XML/XSL, I understand why you
            might not, hence <see cref="T:Inversion.Web.Behaviour.View.RazorViewBehaviour"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Inversion.Web.Behaviour.View.RazorViewBehaviour.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <remarks>
            This constructor defaults the content type to `text/html`.
            </remarks>
        </member>
        <member name="M:Inversion.Web.Behaviour.View.RazorViewBehaviour.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Inversion.Web.Behaviour.View.RazorViewBehaviour.Action(Inversion.Process.IEvent,Inversion.Web.WebContext)">
            <summary>
            Tranforms the last view-step using a razor template.
            </summary>
            <param name="ev">The vent that was considered for this action.</param>
            <param name="context">The context to act upon.</param>
        </member>
        <member name="T:Inversion.Web.Behaviour.View.XmlViewBehaviour">
            <summary>
            Serialise the model of the last view step to XML.
            </summary>
        </member>
        <member name="M:Inversion.Web.Behaviour.View.XmlViewBehaviour.#ctor(System.String)">
            <summary>
            Instantiates a new xml view behaviour to provide production of xml views.
            </summary>
            <remarks>Defaults the content-type to "text/xml"</remarks>
            <param name="message">The message the behaviour has set as responding to.</param>
        </member>
        <member name="M:Inversion.Web.Behaviour.View.XmlViewBehaviour.#ctor(System.String,System.String)">
            <summary>
            Instantiates a new xml view behaviour to provide production of xml views.
            </summary>
            <param name="message">The message the behaviour has set as responding to.</param>
            <param name="contentType">The content type of the view step produced from this behaviour.</param>
        </member>
        <member name="M:Inversion.Web.Behaviour.View.XmlViewBehaviour.Action(Inversion.Process.IEvent,Inversion.Web.WebContext)">
            <summary>
            Writes the model of the last view-step as xml to the content of a new view-step.
            </summary>
            <param name="ev">The event that gave rise to this action.</param>
            <param name="context">The context within which this action is being performed.</param>
        </member>
        <member name="T:Inversion.Web.Behaviour.View.XsltViewBehaviour">
            <summary>
            A behaviour that will transform the last view step by attempting to find
            an appropriate XSL style sheet, based upon the context params
            of *area*, *concern*, and *action*. 
            </summary>
            <remarks>
            This is intended for use in Web application, not as a general
            purpose XSL transform.
            </remarks>
        </member>
        <member name="M:Inversion.Web.Behaviour.View.XsltViewBehaviour.#ctor(System.String)">
            <summary>
            Instantiates a new xslt view behaviour used to provide xslt templating
            primarily for web applications.
            </summary>
            <param name="message">The message the behaviour has set as responding to.</param>
            <remarks>
            Defaults to caching compiled xslt, to a content type of "text/xml".
            </remarks>
        </member>
        <member name="M:Inversion.Web.Behaviour.View.XsltViewBehaviour.#ctor(System.String,System.String)">
            <summary>
            Instantiates a new xslt view behaviour used to provide xslt templating
            primarily for web applications.
            </summary>
            <param name="message">The message the behaviour has set as responding to.</param>
            <param name="contentType">The content type of the view step produced from this behaviour.</param>
            <remarks>
            Defaults to caching compiled xslt.
            </remarks>
        </member>
        <member name="M:Inversion.Web.Behaviour.View.XsltViewBehaviour.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Instantiates a new xslt view behaviour used to provide xslt templating
            primarily for web applications.
            </summary>
            <param name="message">The message the behaviour has set as responding to.</param>
            <param name="contentType">The content type of the view step produced from this behaviour.</param>
            <param name="enableCache">Specifies whether or not the xslt compilation should be cached.</param>
        </member>
        <member name="M:Inversion.Web.Behaviour.View.XsltViewBehaviour.#ctor(System.String,System.Boolean)">
            <summary>
            Instantiates a new xslt view behaviour used to provide xslt templating
            primarily for web applications.
            </summary>
            <param name="message">The message the behaviour has set as responding to.</param>
            <param name="enableCache">Specifies whether or not the xslt compilation should be cached.</param>
            <remarks>Defaults to a content type of "text/xml".</remarks>
        </member>
        <member name="M:Inversion.Web.Behaviour.View.XsltViewBehaviour.Action(Inversion.Process.IEvent,Inversion.Web.WebContext)">
            <summary>
            Takes the content of the last view-step and transforms it with the xslt with the location
            that best matches the path of the url. 
            </summary>
            <remarks>
            The locations checked are produced by the following series of yields:-
            <code>
            //area/concern/action
            yield return Path.Combine(area, concern, action);
            yield return Path.Combine(area, concern, "default.xslt");
            // area/action
            yield return Path.Combine(area, action);
            yield return Path.Combine(area, "default.xslt");
            // concern/action
            yield return Path.Combine(concern, action);
            yield return Path.Combine(concern, "default.xslt");
            // action
            yield return action;
            yield return "default.xslt"; 
            </code>
            </remarks>
            <param name="ev">The event that gave rise to this action.</param>
            <param name="context">The context within which this action is being performed.</param>
        </member>
        <member name="T:Inversion.Web.Behaviour.WebActionBehaviour">
            <summary>
            An abstract provision of a web behaviour that includes features
            for configuring parameter conditions that must be met for the
            behaviours action to execute.
            </summary>
        </member>
        <member name="M:Inversion.Web.Behaviour.WebActionBehaviour.#ctor(System.String)">
            <summary>
            Ensures on instantiation that the base web behaviour constructor
            is called with the message provided.
            </summary>
            <param name="message">The message the behaviour has set as responding to.</param>
        </member>
        <member name="M:Inversion.Web.Behaviour.WebActionBehaviour.Condition(Inversion.Process.IEvent,Inversion.Web.WebContext)">
            <summary>
            Determines if the behaviours action should execute in response
            to the provided event and context.
            </summary>
            <param name="ev">The event to consider.</param>
            <param name="context">The context to consider.</param>
            <returns></returns>
        </member>
        <member name="P:Inversion.Web.Behaviour.WebActionBehaviour.IncludedAllControlStates">
            <summary>
            Gives access to an enumeration of control-state keys that should
            be present in order for this behaviours action to execute.
            </summary>
        </member>
        <member name="P:Inversion.Web.Behaviour.WebActionBehaviour.NonIncludedControlStates">
            <summary>
            Gives access to an enumeration of control-state keys that should not
            be present in order for this behaviours action to execute.
            </summary>
        </member>
        <member name="P:Inversion.Web.Behaviour.WebActionBehaviour.IncludedAllParameters">
            <summary>
            Gives access to an enumeration of context paramter keys that
            should be present on the context for this behaviours action to execute.
            </summary>
        </member>
        <member name="P:Inversion.Web.Behaviour.WebActionBehaviour.NonIncludedParameters">
            <summary>
            Gives access to an enumeration of context paramter keys that
            should not be present on the context for this behaviours action to execute.
            </summary>
        </member>
        <member name="P:Inversion.Web.Behaviour.WebActionBehaviour.MatchingAllParameters">
            <summary>
            Gives access to an enumeration of context key-value pairs that should
            be present on the context for this behaviours action to execute.
            </summary>
        </member>
        <member name="P:Inversion.Web.Behaviour.WebActionBehaviour.NonMatchingAllParameters">
            <summary>
            Gives access to an enumeration of context key-value pairs that should not
            be present on the context for this behaviours action to execute.
            </summary>
        </member>
        <member name="T:Inversion.Web.IInversionHandler">
            <summary>
            A base handler for Conclave.
            </summary>
        </member>
        <member name="M:Inversion.Web.IInversionHandler.ProcessRequest(Inversion.Web.WebContext)">
            <summary>
            Process the current request with the provided `WebContext`.
            </summary>
            <param name="context">
            The `WebContext` being used for the current request.
            </param>
        </member>
        <member name="T:Inversion.Web.UrlInfo">
            <summary>
            Represent the structure of a url.
            </summary>
        </member>
        <member name="F:Inversion.Web.UrlInfo.DefaultRegex">
            <summary>
            The default regex that is used to deconstruct urls.
            </summary>
        </member>
        <member name="M:Inversion.Web.UrlInfo.#ctor(System.Uri)">
            <summary>
            Instantiates a new url-info object from the uri object provided.
            </summary>
            <param name="uri">The uri object to contrsut the url-info from.</param>
        </member>
        <member name="M:Inversion.Web.UrlInfo.#ctor(System.String)">
            <summary>
            Instantiates a new url-info object from the url string representation provided.
            </summary>
            <param name="url">The url to construct the url-info from.</param>
        </member>
        <member name="M:Inversion.Web.UrlInfo.#ctor(System.Uri,System.Text.RegularExpressions.Regex)">
            <summary>
            Instantiates a new url-info object from the uri provided
            using the regex provided to deconstruct it.
            </summary>
            <param name="uri">The uri object to contrsut the url-info from.</param>
            <param name="regex">The regex to use in deconstructing the uri.</param>
        </member>
        <member name="M:Inversion.Web.UrlInfo.#ctor(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Instantiates a new url-info object from the url string representation provided,
            using the regex provided to deconstruct it.
            </summary>
            <param name="url">The url to construct the url-info from.</param>
            <param name="regex">The regex to use in deconstructing the uri.</param>
        </member>
        <member name="M:Inversion.Web.UrlInfo.#ctor(Inversion.Web.UrlInfo)">
            <summary>
            Instantiates a url-info object as a copy
            of the url-info object provided.
            </summary>
            <param name="info">The url-info obect to create a copy from.</param>
        </member>
        <member name="M:Inversion.Web.UrlInfo.ProcessUrl">
            <summary>
            Processes the url with a deconstruction regex.
            </summary>
        </member>
        <member name="M:Inversion.Web.UrlInfo.Clone">
            <summary>
            Instantiates a new url-info object that is a copy
            of the current instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Inversion.Web.UrlInfo.Regex">
            <summary>
            The regular expression being used to break URLs
            down into their parts.
            </summary>
            <remarks>
            If a regular expression isn't provided via the contructor
            then the default <see cref="F:Inversion.Web.UrlInfo.DefaultRegex"/> is used.
            </remarks>
        </member>
        <member name="P:Inversion.Web.UrlInfo.Match">
            <summary>
            The matches produced by matching the
            <see cref="P:Inversion.Web.UrlInfo.Regex"/> against the <see cref="P:Inversion.Web.UrlInfo.Url"/>.
            </summary>
        </member>
        <member name="P:Inversion.Web.UrlInfo.Url">
            <summary>
            The url being processed.
            </summary>
        </member>
        <member name="P:Inversion.Web.UrlInfo.Protocol">
            <summary>
            The protocol specified by the <see cref="P:Inversion.Web.UrlInfo.Url"/>
            </summary>
        </member>
        <member name="P:Inversion.Web.UrlInfo.Domain">
            <summary>
            The domain specified by the <see cref="P:Inversion.Web.UrlInfo.Url"/>
            </summary>
        </member>
        <member name="P:Inversion.Web.UrlInfo.FullPath">
            <summary>
            The full path specified by the <see cref="P:Inversion.Web.UrlInfo.Url"/>
            </summary>
        </member>
        <member name="P:Inversion.Web.UrlInfo.AppPath">
            <summary>
            The application path specified by the <see cref="P:Inversion.Web.UrlInfo.Url"/>
            </summary>
        </member>
        <member name="P:Inversion.Web.UrlInfo.AppUrl">
            <summary>
            The URL of the current application.
            </summary>
        </member>
        <member name="P:Inversion.Web.UrlInfo.File">
            <summary>
            The file specified by the <see cref="P:Inversion.Web.UrlInfo.Url"/>
            </summary>
        </member>
        <member name="P:Inversion.Web.UrlInfo.Extension">
            <summary>
            The extension specified by the <see cref="P:Inversion.Web.UrlInfo.Url"/>
            </summary>
        </member>
        <member name="P:Inversion.Web.UrlInfo.Tail">
            <summary>
            The tail specified by the <see cref="P:Inversion.Web.UrlInfo.Url"/>
            </summary>
        </member>
        <member name="P:Inversion.Web.UrlInfo.QueryString">
            <summary>
            The query string specified by the <see cref="P:Inversion.Web.UrlInfo.Url"/>
            </summary>
        </member>
        <member name="P:Inversion.Web.UrlInfo.Query">
            <summary>
            A name / value dictionary as the propduct of
            parsing the <see cref="P:Inversion.Web.UrlInfo.QueryString"/>
            </summary>
        </member>
        <member name="T:Inversion.Web.WebApplication">
            <summary>
            Represents a running web application application.
            </summary>
        </member>
        <member name="M:Inversion.Web.WebApplication.#ctor">
            <summary>
            Instantiates a new web application, defaulting to the base directory
            of the current app domain.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebApplication.BaseDirectory">
            <summary>
            The base directory from which the application is running.
            </summary>
        </member>
        <member name="T:Inversion.Web.WebContext">
            <summary>
            Extends the process context with web specific
            information about an individual request being processed.
            </summary>
            <remarks>
            The context object is threaded through the whole stack
            and provides a controled pattern and workflow of state,
            along with access to resources and services external
            to the application. Everything hangs off the context.
            </remarks>
        </member>
        <member name="M:Inversion.Web.WebContext.#ctor(System.Web.HttpContext,Inversion.Process.IServiceContainer)">
            <summary>
            Instantiates a new context object purposed for Web applications.
            </summary>
            <param name="underlyingContext">The underlying http context to wrap.</param>
            <param name="services">The service container the context will use.</param>
        </member>
        <member name="P:Inversion.Web.WebContext.UnderlyingContext">
            <summary>
            The underlying http context that is being wrapped by
            this web context.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebContext.Application">
            <summary>
            Provides access to the running web application
            to which this context belongs.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebContext.Response">
            <summary>
            Gives access to the web response of this context.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebContext.Request">
            <summary>
            Gives access to the web request for this context.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebContext.Cache">
            <summary>
            Gives access to the cache being used for this context.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebContext.User">
            <summary>
            Gives access to the `IPrinciple` user object that represents
            the current user for this context.
            </summary>
        </member>
        <member name="T:Inversion.Web.WebException">
            <summary>
            An exception that is thrown when an general error occurs
            within a web application that would correspond to a http status code.
            </summary>
        </member>
        <member name="M:Inversion.Web.WebException.#ctor(System.String)">
            <summary>
            Instantiates a new web exception with the message provided.
            </summary>
            <param name="message">The message to be output if the exception is unhandled.</param>
            <remarks>Defaults the status code to 500.</remarks>
        </member>
        <member name="M:Inversion.Web.WebException.#ctor(System.Net.HttpStatusCode,System.String)">
            <summary>
            Instantiates a new web exception with the status code and message provided.
            </summary>
            <param name="status">The status code that should be produced for this error if it is unhandled.</param>
            <param name="message">The message that should be produced for this error if it is unhandled.</param>
        </member>
        <member name="P:Inversion.Web.WebException.Status">
            <summary>
            The http status code that should be produced for this error
            if it is unhandled and recovered from.
            </summary>
        </member>
        <member name="T:Inversion.Web.WebRequest">
            <summary>
            Provides a wrapper for the underlying web request for application developers to use.
            </summary>
            <remarks>
            This wrapping is mindful of providing a common interface that can port to other platforms.
            Along with providing a point of extensibility and control.
            </remarks>
        </member>
        <member name="M:Inversion.Web.WebRequest.#ctor(System.Web.HttpContext)">
            <summary>
            Instantiates a new web request by wrapping the http request
            of the http context provided.
            </summary>
            <param name="context">The http context from which to obtain the http request to wrap.</param>
        </member>
        <member name="M:Inversion.Web.WebRequest.#ctor(System.Web.HttpRequest)">
            <summary>
            Instantiates a new web request wrapping the http request provided.
            </summary>
            <param name="request">The underlying http request to wrap.</param>
        </member>
        <member name="P:Inversion.Web.WebRequest.UnderlyingRequest">
            <summary>
            The underlying http request being wrapped.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebRequest.Files">
            <summary>
            Gives access to any files uploaded by the user agent
            as part of this request.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebRequest.UrlInfo">
            <summary>
            Gives access to a url-info object that provides
            info about the structure of the url of the request.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebRequest.Method">
            <summary>
            The http method of the request.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebRequest.IsGet">
            <summary>
            Returns true if the http method of this request is GET; otherwise returns false.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebRequest.IsPost">
            <summary>
            Returns true if the http method of this request is POST; otherwise returns false.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebRequest.Params">
            <summary>
            Provides access to the request parameters from both the querystring
            and those that are posted.
            </summary>
            <remarks>
            First params are read from the querystring and then those posted which
            will override any from the querystring.
            </remarks>
        </member>
        <member name="P:Inversion.Web.WebRequest.Payload">
            <summary>
            Gives access to the payload if any of the request.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebRequest.Flags">
            <summary>
            Gives access to any flags present in the querystring.
            </summary>
            <remarks>
            Any querystring parameter that is a single value rather
            that a key-value pair is regarded as a flag.
            </remarks>
        </member>
        <member name="P:Inversion.Web.WebRequest.Headers">
            <summary>
            Gives access to the headers of the reuqest.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebRequest.Cookies">
            <summary>
            Gives access to the request cookies.
            </summary>
        </member>
        <member name="T:Inversion.Web.WebResponse">
            <summary>
            Provides a wrapper of the underlying http response for application
            developers to use.
            </summary>
            <remarks>
            This wrapping is mindful of providing a common interface that can port to other platforms.
            Along with providing a point of extensibility and control.
            </remarks>
        </member>
        <member name="M:Inversion.Web.WebResponse.#ctor(System.Web.HttpContext)">
            <summary>
            Instantiates a new web response by wrapping the http response
            of the http context provided.
            </summary>
            <param name="context">The http context from which to obtain the http response to wrap.</param>
        </member>
        <member name="M:Inversion.Web.WebResponse.#ctor(System.Web.HttpResponse)">
            <summary>
            Instantiates a new web response wrapping the http response provided.
            </summary>
            <param name="underlyingResponse">The underlying http response to wrap.</param>
        </member>
        <member name="M:Inversion.Web.WebResponse.End">
            <summary>
            Flushes the response steam and ends the response.
            </summary>
        </member>
        <member name="M:Inversion.Web.WebResponse.Write(System.String)">
            <summary>
            Writes the provided text to the response stream.
            </summary>
            <param name="text">The text to write to the response stream.</param>
        </member>
        <member name="M:Inversion.Web.WebResponse.WriteFormat(System.String,System.Object[])">
            <summary>
            Writes the provided formatted text to the response stream.
            </summary>
            <param name="text">The text to write to the response stream.</param>
            <param name="args">The arguments to interpolate into the text.</param>
        </member>
        <member name="M:Inversion.Web.WebResponse.Redirect(System.String)">
            <summary>
            Redirects the request to the provided url.
            </summary>
            <param name="url">The url to redirect to.</param>
        </member>
        <member name="M:Inversion.Web.WebResponse.PermanentRedirect(System.String)">
            <summary>
            Redirects the request permanently to the provided url
            issuing a `301` in the response.
            </summary>
            <param name="url"></param>
        </member>
        <member name="P:Inversion.Web.WebResponse.UnderlyingResponse">
            <summary>
            The underlying http response being wrapped.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebResponse.Output">
            <summary>
            The text writer used for writing to the response stream.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebResponse.OutputStream">
            <summary>
            The response stream.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebResponse.StatusCode">
            <summary>
            The status code of the response.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebResponse.StatusDescription">
            <summary>
            The status description of the response stream.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebResponse.ContentType">
            <summary>
            The content type of the response stream.
            </summary>
        </member>
        <member name="P:Inversion.Web.WebResponse.Cookies">
            <summary>
            Access to the response cookies.
            </summary>
        </member>
    </members>
</doc>
